;;; evolmacs-eval-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from evolmacs.el

(autoload 'evolmacs-create-function "evolmacs" "\
Create a new function based on natural language SPEC.
FUNCTION-NAME is the name to use for the function.
Optional LIBRARY specifies where to save the function.

(fn SPEC FUNCTION-NAME &optional LIBRARY)" t)


;;; Generated autoloads from evolmacs-core.el

(autoload 'evolmacs-run-test "evolmacs-core" "\
Run TEST-CODE containing an ERT test.
Returns a plist with :success, :test-name, and :error keys.

(fn TEST-CODE)")
(autoload 'evolmacs-generate-and-test "evolmacs-core" "\
Generate, test, and potentially repair a function based on SPEC.
FUNCTION-NAME is the desired name for the function.
LIBRARY is the target library where the function should be saved.
Returns a plist with keys :success, :function-code, :test-code, and :error.

(fn SPEC FUNCTION-NAME LIBRARY)")
(register-definition-prefixes "evolmacs-core" '("evolmacs-max-repair-attempts"))


;;; Generated autoloads from evolmacs-eval.el

(autoload 'evolmacs-eval-safely "evolmacs-eval" "\
Safely evaluate CODE string containing Emacs Lisp.
Returns a plist with :success, :result, and :error keys.

(fn CODE)")
(autoload 'evolmacs-eval-function-safely "evolmacs-eval" "\
Safely evaluate FUNCTION-CODE defining an Emacs Lisp function.
Returns a plist with :success, :function-name, and :error keys.

(fn FUNCTION-CODE)")
(register-definition-prefixes "evolmacs-eval" '("evolmacs-eval-max-execution-time"))


;;; Generated autoloads from evolmacs-llm.el

(autoload 'evolmacs-llm-generate-package "evolmacs-llm" "\
Generate an Emacs Lisp function and test based on SPEC.
FUNCTION-NAME is the desired name for the function.
LIBRARY is the target library where the function should be saved.
Returns a plist with :function-code and :test-code if successful.

(fn SPEC FUNCTION-NAME LIBRARY)")
(autoload 'evolmacs-llm-repair-function "evolmacs-llm" "\
Repair a function based on test failure.
SPEC is the function specification.
PREVIOUS-CODE is the code that needs fixing.
ERROR is the error message from the test.
Returns a plist with :function-code if successful.

(fn SPEC PREVIOUS-CODE ERROR)")
(register-definition-prefixes "evolmacs-llm" '("evolmacs-llm-"))

;;; End of scraped data

(provide 'evolmacs-eval-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; evolmacs-eval-autoloads.el ends here
